@startuml ClassDiagram

'Definition of classes

'Recommendation will hold the final games shown to the user
class "Recommendation" as Rec {
    'This list of games are the ones used in the graphic interface
    result: list[Games]
}


class "GameDatabase" as Dtb {
    'This is the list of all games in the database
    listofgames: list[Games]
}

'Classifier will be the class in which everything materializes and gathers
'the steps done by the other classes
class Classifier {
    selections: Selections
    database: Dtb
    collections: Collections
    similars() -> list[Games]

}

class Collections {

}

'Selections will get and hold the information that the user inputs
class Selections {
    genre: list[str]
    platforms: list[str]
    developer: str
    diff: int
    void getInfo(interface: Interface) -> None
}


abstract class Attributes {
    {abstract} id: int
    {abstract} title: str
    {abstract} cover: str
    {abstract} release_year: int
    {abstract} gender: str
    {abstract} diff: float
    {abstract} platform: list[str]
    {abstract} developer: str

}
class Games{
    inDatabase(dtb: GameDatabase) -> bool
}

'Relationships

Selections "1" *- "1" Classifier: Uses Attributes <
Classifier "1 " *-Down- "1 " Rec: Gets Recommendation >
Dtb *-U- Classifier
Dtb "1      " -U-o  "0...*" Games: Contains >
Attributes <|-U- Games
Collections "1 " *-- "1 "Classifier: Uses to hold information <

@enduml